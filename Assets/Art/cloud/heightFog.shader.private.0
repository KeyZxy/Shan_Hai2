Shader "Unlit/heightFog"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _FogStart("fog start",FLOAT) = 1
        _FogEnd("fog end",FLOAT) = 1
        _FogSpeed("fog speed",Range(0,10)) =1
        
        _FogTex("fog tex",2D) =  "white" {}
        _FogColor("fog color",COLOR) = (1,1,1,1)
    	_NoiseIntensity("noise intensity",Range(0,1)) = 1
        
        [Header(Volume Lighting)]
        _VLightColor("VLight Color",COLOR) = (1,1,1,1)
        _VLightIntensity("vlight intensity",Range(0,1)) = 0.1
        _StepSize("step size",Range(0,1)) = 0.1
        _MaxStep ("max step",float) = 200      //设置最大步数
        _MaxDistance ("max distance",float) = 1000   //最大步进距离
    	_ShadowAttenuation("ShadowAttenuation",Float) = 0.08
    	_VLightPower("vlight power",Range(0,10)) = 1
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog
            #pragma multi_compile DIRECTIONAL 

            #include "Lighting.cginc"
			#include "UnityCG.cginc"
            #include"AutoLight.cginc"
            #include "UnityDeferredLibrary.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
                float3 viewRay : TEXCOORD2;
                SHADOW_COORDS(3)
            };

            sampler2D _MainTex,_FogTex;
            float4 _MainTex_ST,_FogColor,_FogTex_ST,_VLightColor;

            float _FogStart,_FogEnd,_FogSpeed,_StepSize,_MaxStep,_MaxDistance,_VLightIntensity,_VLightPower;

            //sampler2D _CameraDepthTexture;
            uniform float4x4 _ViewMatrix;
            //sampler2D _ShadowMapTexture;
            //Texture2D _ShadowMapTexture;
            //SamplerComparisonState sampler_ShadowMapTexture;
            float _ShadowAttenuation;
            //uniform float4 _CamTransform;
            UNITY_DECLARE_SHADOWMAP(_ShadowMapTexture);

            float Remap(float x,float from1,float to1,float from2,float to2) {
				return (x - from1) / (to1 - from1) * (to2 - from2) + from2;
			}

            float GetShadow(float3 worldPos) {
				//比较灯光空间深度
				//UNITY_DECLARE_SHADOWMAP(_ShadowMapTexture);
				float4 lightPos = mul(unity_WorldToShadow[0], float4(worldPos, 1));
            	//float4 lightPos = ComputeScreenPos(float4(worldPos, 1));
            	//unitySampleShadow(lightPos);
 				float shadow = UNITY_SAMPLE_SHADOW(_ShadowMapTexture, lightPos.xyz);
				float depth = lightPos.z ;
				float shadowValue = step(shadow, depth);
				//阴影的衰减
				float dis = abs(depth - shadow);								
				shadowValue += clamp(Remap(dis, _ShadowAttenuation,0.1,0,1),0,1)*(1-shadowValue);
            	//return shadow;
				return shadowValue;
			}

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                //对每一个顶点进行赋值
                if (o.uv.y < 0.5 && o.uv.x < 0.5) {
					o.viewRay = _ViewMatrix[2];  //左下
                    #if UNITY_UV_STARTS_AT_TOP
                    o.viewRay = _ViewMatrix[0];
                    #endif
				}
				else if (o.uv.y < 0.5 && o.uv.x > 0.5) { //右下
					o.viewRay = _ViewMatrix[3];
				    #if UNITY_UV_STARTS_AT_TOP
                    o.viewRay = _ViewMatrix[1];
                    #endif
				}
				else if (o.uv.y > 0.5 && o.uv.x < 0.5) { //左上
					o.viewRay = _ViewMatrix[0];
				    #if UNITY_UV_STARTS_AT_TOP
                    o.viewRay = _ViewMatrix[2];
                    #endif
				}
				else if (o.uv.y > 0.5 && o.uv.y > 0.5) { //右上
					o.viewRay = _ViewMatrix[1];
				    #if UNITY_UV_STARTS_AT_TOP
                    o.viewRay = _ViewMatrix[3];
                    #endif
				}
                
                UNITY_TRANSFER_FOG(o,o.vertex);
                TRANSFER_SHADOW(o);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float fogNoise = tex2D(_FogTex,i.uv + _FogSpeed * _Time.x);
                float4 finalFogColor = fogNoise * _FogColor;
                //采样深度图
                SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv);
                //转化深度
                float realDepth = LinearEyeDepth(SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, i.uv));

                //还原世界坐标
                float3 worldPos = _WorldSpaceCameraPos.xyz + i.viewRay * realDepth;
                // sample the texture
                fixed4 col = tex2D(_MainTex, i.uv);
                //基于世界坐标高度插值颜色
                float fogInterpolator = (worldPos.y - _FogStart)/(_FogEnd - _FogStart);
                fogInterpolator = saturate(fogInterpolator);

                //加入体积光
                float totalInt = 0;
                float3 rayDir = -normalize(i.viewRay);
                float3 currentPos = _WorldSpaceCameraPos.xyz;
                //进行光线步进
                [unroll(200)]
                for (int j = 0 ;j <_MaxStep;j++)
                {
                    currentPos -= rayDir * _StepSize;
                	//当超过最大步进距离或超过场景距离时停止
                    if (distance(currentPos,_WorldSpaceCameraPos.xyz) > _MaxDistance ||distance(currentPos,_WorldSpaceCameraPos.xyz) >  distance(worldPos,_WorldSpaceCameraPos.xyz))
                        break;
                    //UNITY_LIGHT_ATTENUATION(attenuation, i, currentPos);
                    float atten = GetShadow(currentPos);
                    totalInt += atten * _VLightIntensity;
                }
            	totalInt = pow(totalInt,_VLightPower);
            	//return float4(totalInt,totalInt,totalInt,1);
                float4 finalVlight = totalInt *_VLightColor ;
                col = lerp(finalFogColor,col,fogInterpolator);
                col = col + finalVlight;
                // apply fog
                
                UNITY_APPLY_FOG(i.fogCoord, col);
                
                return col;
            }
            ENDCG
        }
    }
}
